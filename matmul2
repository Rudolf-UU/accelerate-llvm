accelerate-llvm-native-1.3.0.0: unregistering (local file changes: .stack-work/dist/x86_64-linux/Cabal-3.4.1.0/build/autogen/Paths_accelerate_llvm_native.hs)
accelerate-llvm-native> build (lib + test)
Preprocessing library for accelerate-llvm-native-1.3.0.0..
Building library for accelerate-llvm-native-1.3.0.0..
Preprocessing test suite 'nofib-llvm-native' for accelerate-llvm-native-1.3.0.0..
Building test suite 'nofib-llvm-native' for accelerate-llvm-native-1.3.0.0..
accelerate-llvm-native> copy/register
Installing library in /home/david/Documents/accelerate/accelerate-llvm/.stack-work/install/x86_64-linux/8eec9d306e2770ab34d0aaa1b5dd82b248e8799ba20fe16f751c132a7f845050/9.0.2/lib/x86_64-linux-ghc-9.0.2/accelerate-llvm-native-1.3.0.0-zOEtjf5Nq6BWao6phvyEN
Registering library for accelerate-llvm-native-1.3.0.0..
accelerate-llvm-native> test (suite: nofib-llvm-native)

("compute",Label5,fromList [Label1,Label2])
("compute",Label10,fromList [Label1,Label2])
("compute",Label15,fromList [Label4,Label9])
("compute",Label17,fromList [Label4,Label9])
("compute",Label19,fromList [Label4,Label9])
("graph",fromList [Label8 :-> Label26,Label13 :-> Label27,Label26 :-> Label28,Label27 :-> Label28,Label28 :-> Label31,Label31 :-> Label34],fromList [Label1 :-> Label3,Label2 :-> Label3,Label4 :-> Label7,Label4 :-> Label15,Label4 :-> Label17,Label4 :-> Label19,Label4 :-> Label35,Label5 :-> Label4,Label6 :-> Label8,Label6 :-> Label35,Label7 :-> Label6,Label9 :-> Label12,Label9 :-> Label15,Label9 :-> Label17,Label9 :-> Label19,Label9 :-> Label35,Label10 :-> Label9,Label11 :-> Label13,Label11 :-> Label35,Label12 :-> Label11,Label14 :-> Label21,Label14 :-> Label23,Label14 :-> Label25,Label14 :-> Label35,Label15 :-> Label14,Label16 :-> Label21,Label16 :-> Label23,Label16 :-> Label25,Label16 :-> Label35,Label17 :-> Label16,Label18 :-> Label21,Label18 :-> Label23,Label18 :-> Label25,Label18 :-> Label35,Label19 :-> Label18,Label20 :-> Label28,Label20 :-> Label35,Label21 :-> Label20,Label22 :-> Label26,Label22 :-> Label35,Label23 :-> Label22,Label24 :-> Label27,Label24 :-> Label35,Label25 :-> Label24,Label29 :-> Label31,Label29 :-> Label35,Label30 :-> Label29,Label32 :-> Label34,Label32 :-> Label35,Label33 :-> Label32,Label34 :-> Label35],fromList [Label1,Label2,Label3,Label4,Label5,Label6,Label7,Label8,Label9,Label10,Label11,Label12,Label13,Label14,Label15,Label16,Label17,Label18,Label19,Label20,Label21,Label22,Label23,Label24,Label25,Label26,Label27,Label28,Label29,Label30,Label31,Label32,Label33,Label34,Label35])
(Problem {name = Just "AccelerateILP", objectiveFunction = ObjectiveFunction {objLabel = Just "AccelerateObjective", objDir = OptMin, objExpr = Expr [Term 1.0 ["x_a"]]}, constraints = [Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_b"],Term (-1.0) ["x_c"],Term 1.0 ["x_d"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_c"],Term (-1.0) ["x_d"],Term (-40.0) ["x_b"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_e"],Term (-1.0) ["x_c"],Term 1.0 ["x_f"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_c"],Term (-1.0) ["x_f"],Term (-40.0) ["x_e"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_g"],Term (-1.0) ["x_h"],Term 1.0 ["x_i"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_h"],Term (-1.0) ["x_i"],Term (-40.0) ["x_g"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_j"],Term (-1.0) ["x_k"],Term 1.0 ["x_i"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_k"],Term (-1.0) ["x_i"],Term (-40.0) ["x_j"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_l"],Term (-1.0) ["x_m"],Term 1.0 ["x_i"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_m"],Term (-1.0) ["x_i"],Term (-40.0) ["x_l"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_n"],Term (-1.0) ["x_o"],Term 1.0 ["x_i"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_o"],Term (-1.0) ["x_i"],Term (-40.0) ["x_n"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_p"],Term (-1.0) ["x_q"],Term 1.0 ["x_i"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_i"],Term (-40.0) ["x_p"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_r"],Term (-1.0) ["x_i"],Term 1.0 ["x_s"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_i"],Term (-1.0) ["x_s"],Term (-40.0) ["x_r"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_t"],Term (-1.0) ["x_u"],Term 1.0 ["x_v"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_u"],Term (-1.0) ["x_v"],Term (-40.0) ["x_t"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_w"],Term (-1.0) ["x_q"],Term 1.0 ["x_v"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_v"],Term (-40.0) ["x_w"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_x"],Term (-1.0) ["x_v"],Term 1.0 ["x_h"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_v"],Term (-1.0) ["x_h"],Term (-40.0) ["x_x"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_y"],Term (-1.0) ["x_z"],Term 1.0 ["x_u"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_z"],Term (-1.0) ["x_u"],Term (-40.0) ["x_y"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_aa"],Term (-1.0) ["x_ba"],Term 1.0 ["x_ca"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ba"],Term (-1.0) ["x_ca"],Term (-40.0) ["x_aa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_da"],Term (-1.0) ["x_k"],Term 1.0 ["x_ca"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_k"],Term (-1.0) ["x_ca"],Term (-40.0) ["x_da"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ea"],Term (-1.0) ["x_m"],Term 1.0 ["x_ca"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_m"],Term (-1.0) ["x_ca"],Term (-40.0) ["x_ea"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_fa"],Term (-1.0) ["x_o"],Term 1.0 ["x_ca"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_o"],Term (-1.0) ["x_ca"],Term (-40.0) ["x_fa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ga"],Term (-1.0) ["x_q"],Term 1.0 ["x_ca"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_ca"],Term (-40.0) ["x_ga"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ha"],Term (-1.0) ["x_ca"],Term 1.0 ["x_ia"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ca"],Term (-1.0) ["x_ia"],Term (-40.0) ["x_ha"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ja"],Term (-1.0) ["x_ka"],Term 1.0 ["x_la"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ka"],Term (-1.0) ["x_la"],Term (-40.0) ["x_ja"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ma"],Term (-1.0) ["x_q"],Term 1.0 ["x_la"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_la"],Term (-40.0) ["x_ma"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_na"],Term (-1.0) ["x_la"],Term 1.0 ["x_ba"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_la"],Term (-1.0) ["x_ba"],Term (-40.0) ["x_na"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_oa"],Term (-1.0) ["x_pa"],Term 1.0 ["x_ka"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_pa"],Term (-1.0) ["x_ka"],Term (-40.0) ["x_oa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_qa"],Term (-1.0) ["x_ra"],Term 1.0 ["x_sa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ra"],Term (-1.0) ["x_sa"],Term (-40.0) ["x_qa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ta"],Term (-1.0) ["x_ua"],Term 1.0 ["x_sa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ua"],Term (-1.0) ["x_sa"],Term (-40.0) ["x_ta"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_va"],Term (-1.0) ["x_wa"],Term 1.0 ["x_sa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_wa"],Term (-1.0) ["x_sa"],Term (-40.0) ["x_va"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_xa"],Term (-1.0) ["x_q"],Term 1.0 ["x_sa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_sa"],Term (-40.0) ["x_xa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ya"],Term (-1.0) ["x_sa"],Term 1.0 ["x_k"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_sa"],Term (-1.0) ["x_k"],Term (-40.0) ["x_ya"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_za"],Term (-1.0) ["x_ra"],Term 1.0 ["x_ab"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ra"],Term (-1.0) ["x_ab"],Term (-40.0) ["x_za"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_bb"],Term (-1.0) ["x_ua"],Term 1.0 ["x_ab"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ua"],Term (-1.0) ["x_ab"],Term (-40.0) ["x_bb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_cb"],Term (-1.0) ["x_wa"],Term 1.0 ["x_ab"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_wa"],Term (-1.0) ["x_ab"],Term (-40.0) ["x_cb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_db"],Term (-1.0) ["x_q"],Term 1.0 ["x_ab"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_ab"],Term (-40.0) ["x_db"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_eb"],Term (-1.0) ["x_ab"],Term 1.0 ["x_m"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ab"],Term (-1.0) ["x_m"],Term (-40.0) ["x_eb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_fb"],Term (-1.0) ["x_ra"],Term 1.0 ["x_gb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ra"],Term (-1.0) ["x_gb"],Term (-40.0) ["x_fb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_hb"],Term (-1.0) ["x_ua"],Term 1.0 ["x_gb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ua"],Term (-1.0) ["x_gb"],Term (-40.0) ["x_hb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ib"],Term (-1.0) ["x_wa"],Term 1.0 ["x_gb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_wa"],Term (-1.0) ["x_gb"],Term (-40.0) ["x_ib"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_jb"],Term (-1.0) ["x_q"],Term 1.0 ["x_gb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_gb"],Term (-40.0) ["x_jb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_kb"],Term (-1.0) ["x_gb"],Term 1.0 ["x_o"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_gb"],Term (-1.0) ["x_o"],Term (-40.0) ["x_kb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_lb"],Term (-1.0) ["x_mb"],Term 1.0 ["x_nb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_mb"],Term (-1.0) ["x_nb"],Term (-40.0) ["x_lb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ob"],Term (-1.0) ["x_q"],Term 1.0 ["x_nb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_nb"],Term (-40.0) ["x_ob"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_pb"],Term (-1.0) ["x_nb"],Term 1.0 ["x_ra"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_nb"],Term (-1.0) ["x_ra"],Term (-40.0) ["x_pb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_qb"],Term (-1.0) ["x_z"],Term 1.0 ["x_rb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_z"],Term (-1.0) ["x_rb"],Term (-40.0) ["x_qb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_sb"],Term (-1.0) ["x_q"],Term 1.0 ["x_rb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_rb"],Term (-40.0) ["x_sb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_tb"],Term (-1.0) ["x_rb"],Term 1.0 ["x_ua"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_rb"],Term (-1.0) ["x_ua"],Term (-40.0) ["x_tb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ub"],Term (-1.0) ["x_pa"],Term 1.0 ["x_vb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_pa"],Term (-1.0) ["x_vb"],Term (-40.0) ["x_ub"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_wb"],Term (-1.0) ["x_q"],Term 1.0 ["x_vb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_vb"],Term (-40.0) ["x_wb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_xb"],Term (-1.0) ["x_vb"],Term 1.0 ["x_wa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_vb"],Term (-1.0) ["x_wa"],Term (-40.0) ["x_xb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_yb"],Term (-1.0) ["x_mb"],Term 1.0 ["x_z"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_mb"],Term (-1.0) ["x_z"],Term (-40.0) ["x_yb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_zb"],Term (-1.0) ["x_mb"],Term 1.0 ["x_pa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_mb"],Term (-1.0) ["x_pa"],Term (-40.0) ["x_zb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ac"],Term (-1.0) ["x_bc"],Term 1.0 ["x_mb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_bc"],Term (-1.0) ["x_mb"],Term (-40.0) ["x_ac"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_cc"],Term (-1.0) ["x_bc"],Term 1.0 ["x_dc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_bc"],Term (-1.0) ["x_dc"],Term (-40.0) ["x_cc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ec"],Term (-1.0) ["x_q"],Term 1.0 ["x_dc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_dc"],Term (-40.0) ["x_ec"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_fc"],Term (-1.0) ["x_dc"],Term 1.0 ["x_gc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_dc"],Term (-1.0) ["x_gc"],Term (-40.0) ["x_fc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_hc"],Term (-1.0) ["x_ic"],Term 1.0 ["x_bc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ic"],Term (-1.0) ["x_bc"],Term (-40.0) ["x_hc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_jc"],Term (-1.0) ["x_ic"],Term 1.0 ["x_kc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ic"],Term (-1.0) ["x_kc"],Term (-40.0) ["x_jc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_lc"],Term (-1.0) ["x_q"],Term 1.0 ["x_kc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_kc"],Term (-40.0) ["x_lc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_mc"],Term (-1.0) ["x_kc"],Term 1.0 ["x_nc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_kc"],Term (-1.0) ["x_nc"],Term (-40.0) ["x_mc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_oc"],Term (-1.0) ["x_q"],Term 1.0 ["x_ic"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_ic"],Term (-40.0) ["x_oc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_b"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_e"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_g"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_j"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_l"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_n"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_p"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_r"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_t"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_w"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_x"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_aa"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_da"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ea"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_fa"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ga"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ha"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ja"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ma"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_na"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_qa"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ta"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_va"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_xa"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ya"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_za"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_bb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_cb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_db"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_eb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_fb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_hb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ib"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_jb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_kb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_lb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ob"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_pb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_qb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_sb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_tb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ub"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_wb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_xb"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_cc"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ec"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_fc"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_jc"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_lc"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_mc"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_oc"]], constrLB = Finite 1.0, constrUB = Finite 1.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_b"],Term (-1.0) ["x_pc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_e"],Term (-1.0) ["x_qc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_g"],Term (-1.0) ["x_rc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_j"],Term (-1.0) ["x_rc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_l"],Term (-1.0) ["x_rc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_n"],Term (-1.0) ["x_rc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_p"],Term (-1.0) ["x_rc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_r"],Term (-1.0) ["x_sc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_t"],Term (-1.0) ["x_tc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_w"],Term (-1.0) ["x_tc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_x"],Term (-1.0) ["x_uc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_y"],Term (-1.0) ["x_vc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_aa"],Term (-1.0) ["x_wc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_da"],Term (-1.0) ["x_wc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ea"],Term (-1.0) ["x_wc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_fa"],Term (-1.0) ["x_wc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ga"],Term (-1.0) ["x_wc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ha"],Term (-1.0) ["x_xc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ja"],Term (-1.0) ["x_yc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ma"],Term (-1.0) ["x_yc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_na"],Term (-1.0) ["x_zc"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_oa"],Term (-1.0) ["x_ad"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_qa"],Term (-1.0) ["x_bd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ta"],Term (-1.0) ["x_bd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_va"],Term (-1.0) ["x_bd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_xa"],Term (-1.0) ["x_bd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ya"],Term (-1.0) ["x_cd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_za"],Term (-1.0) ["x_dd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_bb"],Term (-1.0) ["x_dd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_cb"],Term (-1.0) ["x_dd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_db"],Term (-1.0) ["x_dd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_eb"],Term (-1.0) ["x_ed"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_fb"],Term (-1.0) ["x_fd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_hb"],Term (-1.0) ["x_fd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ib"],Term (-1.0) ["x_fd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_jb"],Term (-1.0) ["x_fd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_kb"],Term (-1.0) ["x_gd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_lb"],Term (-1.0) ["x_hd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ob"],Term (-1.0) ["x_hd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_pb"],Term (-1.0) ["x_id"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_qb"],Term (-1.0) ["x_jd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_sb"],Term (-1.0) ["x_jd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_tb"],Term (-1.0) ["x_kd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ub"],Term (-1.0) ["x_ld"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_wb"],Term (-1.0) ["x_ld"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_xb"],Term (-1.0) ["x_md"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_yb"],Term (-1.0) ["x_nd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_zb"],Term (-1.0) ["x_od"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ac"],Term (-1.0) ["x_pd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_cc"],Term (-1.0) ["x_qd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_ec"],Term (-1.0) ["x_qd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_fc"],Term (-1.0) ["x_rd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_hc"],Term (-1.0) ["x_sd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_jc"],Term (-1.0) ["x_td"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_lc"],Term (-1.0) ["x_td"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_mc"],Term (-1.0) ["x_ud"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term (-1.0) ["x_oc"],Term (-1.0) ["x_vd"]], constrLB = Finite (-1.0), constrUB = PosInf, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_d"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_f"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_c"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_i"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_s"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_v"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_h"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_u"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ca"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ia"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_la"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ba"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ka"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_sa"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_k"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ab"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_m"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_gb"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_o"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_nb"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ra"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_rb"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ua"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_vb"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_wa"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_z"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_pa"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_mb"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_dc"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_gc"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_bc"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_kc"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_nc"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ic"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_q"],Term (-1.0) ["x_a"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_wd"],Term (-40.0) ["x_xd"],Term (-1.0) ["x_z"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_z"],Term (-1.0) ["x_wd"],Term (-40.0) ["x_xd"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_xd"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_wd"],Term (-40.0) ["x_yd"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_zd"],Term (-40.0) ["x_ae"],Term (-1.0) ["x_pa"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_pa"],Term (-1.0) ["x_zd"],Term (-40.0) ["x_ae"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ae"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_zd"],Term (-40.0) ["x_be"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ce"],Term (-40.0) ["x_de"],Term (-1.0) ["x_mb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_mb"],Term (-1.0) ["x_ce"],Term (-40.0) ["x_de"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_de"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ce"],Term (-40.0) ["x_ee"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_fe"],Term (-40.0) ["x_ge"],Term (-1.0) ["x_mb"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_mb"],Term (-1.0) ["x_fe"],Term (-40.0) ["x_ge"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ge"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_fe"],Term (-40.0) ["x_he"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ie"],Term (-40.0) ["x_je"],Term (-1.0) ["x_bc"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_bc"],Term (-1.0) ["x_ie"],Term (-40.0) ["x_je"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_je"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ie"],Term (-40.0) ["x_ke"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_le"],Term (-40.0) ["x_me"],Term (-1.0) ["x_ic"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ic"],Term (-1.0) ["x_le"],Term (-40.0) ["x_me"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_me"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_le"],Term (-40.0) ["x_ne"]], constrLB = NegInf, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_oe"]], constrLB = Finite 8.0, constrUB = Finite 8.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_pe"]], constrLB = Finite 13.0, constrUB = Finite 13.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_qe"]], constrLB = Finite 26.0, constrUB = Finite 26.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_re"]], constrLB = Finite 27.0, constrUB = Finite 27.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_se"],Term (-1.0) ["x_te"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ue"],Term (-1.0) ["x_ve"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_we"]], constrLB = Finite 31.0, constrUB = Finite 31.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_xe"],Term (-1.0) ["x_ye"]], constrLB = Finite 0.0, constrUB = Finite 0.0, constrIsLazy = False},Constraint {constrLabel = Nothing, constrIndicator = Nothing, constrExpr = Expr [Term 1.0 ["x_ze"],Term (-1.0) ["x_af"]], constrLB = Finite 2.0, constrUB = Finite 2.0, constrIsLazy = False}], sosConstraints = [], userCuts = [], varType = fromList [("x_ec",IntegerVariable),("x_nd",IntegerVariable),("x_rb",IntegerVariable),("x_ya",IntegerVariable),("x_b",IntegerVariable),("x_sa",IntegerVariable),("x_qe",IntegerVariable),("x_oe",IntegerVariable),("x_jc",IntegerVariable),("x_i",IntegerVariable),("x_ve",IntegerVariable),("x_ma",IntegerVariable),("x_hc",IntegerVariable),("x_ga",IntegerVariable),("x_aa",IntegerVariable),("x_jd",IntegerVariable),("x_ub",IntegerVariable),("x_pb",IntegerVariable),("x_de",IntegerVariable),("x_w",IntegerVariable),("x_kb",IntegerVariable),("x_fb",IntegerVariable),("x_ib",IntegerVariable),("x_db",IntegerVariable),("x_xb",IntegerVariable),("x_ke",IntegerVariable),("x_nb",IntegerVariable),("x_e",IntegerVariable),("x_ze",IntegerVariable),("x_yc",IntegerVariable),("x_l",IntegerVariable),("x_md",IntegerVariable),("x_gd",IntegerVariable),("x_oc",IntegerVariable),("x_ja",IntegerVariable),("x_k",IntegerVariable),("x_vc",IntegerVariable),("x_ue",IntegerVariable),("x_mc",IntegerVariable),("x_he",IntegerVariable),("x_be",IntegerVariable),("x_ac",IntegerVariable),("x_pd",IntegerVariable),("x_we",IntegerVariable),("x_q",IntegerVariable),("x_id",IntegerVariable),("x_cd",IntegerVariable),("x_xd",IntegerVariable),("x_x",IntegerVariable),("x_zb",IntegerVariable),("x_g",IntegerVariable),("x_sb",IntegerVariable),("x_qb",IntegerVariable),("x_ye",IntegerVariable),("x_n",IntegerVariable),("x_se",IntegerVariable),("x_gb",IntegerVariable),("x_bb",IntegerVariable),("x_oa",IntegerVariable),("x_va",IntegerVariable),("x_pa",IntegerVariable),("x_ae",IntegerVariable),("x_t",IntegerVariable),("x_le",IntegerVariable),("x_fe",IntegerVariable),("x_da",IntegerVariable),("x_cc",IntegerVariable),("x_xa",IntegerVariable),("x_wc",IntegerVariable),("x_s",IntegerVariable),("x_lb",IntegerVariable),("x_eb",IntegerVariable),("x_ne",IntegerVariable),("x_z",IntegerVariable),("x_rc",IntegerVariable),("x_a",IntegerVariable),("x_rd",IntegerVariable),("x_qd",IntegerVariable),("x_od",IntegerVariable),("x_h",IntegerVariable),("x_je",IntegerVariable),("x_ua",IntegerVariable),("x_pc",IntegerVariable),("x_v",IntegerVariable),("x_fc",IntegerVariable),("x_ee",IntegerVariable),("x_ia",IntegerVariable),("x_dc",IntegerVariable),("x_ca",IntegerVariable),("x_xc",IntegerVariable),("x_wa",IntegerVariable),("x_kd",IntegerVariable),("x_nc",IntegerVariable),("x_d",IntegerVariable),("x_ra",IntegerVariable),("x_yb",IntegerVariable),("x_c",IntegerVariable),("x_ob",IntegerVariable),("x_jb",IntegerVariable),("x_j",IntegerVariable),("x_vd",IntegerVariable),("x_ud",IntegerVariable),("x_mb",IntegerVariable),("x_hb",IntegerVariable),("x_ab",IntegerVariable),("x_uc",IntegerVariable),("x_pe",IntegerVariable),("x_dd",IntegerVariable),("x_wd",IntegerVariable),("x_p",IntegerVariable),("x_la",IntegerVariable),("x_kc",IntegerVariable),("x_fa",IntegerVariable),("x_ic",IntegerVariable),("x_xe",IntegerVariable),("x_na",IntegerVariable),("x_zc",IntegerVariable),("x_f",IntegerVariable),("x_qa",IntegerVariable),("x_zd",IntegerVariable),("x_yd",IntegerVariable),("x_m",IntegerVariable),("x_sd",IntegerVariable),("x_me",IntegerVariable),("x_ge",IntegerVariable),("x_bc",IntegerVariable),("x_vb",IntegerVariable),("x_hd",IntegerVariable),("x_bd",IntegerVariable),("x_ad",IntegerVariable),("x_cb",IntegerVariable),("x_wb",IntegerVariable),("x_r",IntegerVariable),("x_lc",IntegerVariable),("x_ka",IntegerVariable),("x_ea",IntegerVariable),("x_ie",IntegerVariable),("x_ce",IntegerVariable),("x_y",IntegerVariable),("x_za",IntegerVariable),("x_ta",IntegerVariable),("x_sc",IntegerVariable),("x_re",IntegerVariable),("x_qc",IntegerVariable),("x_o",IntegerVariable),("x_ha",IntegerVariable),("x_gc",IntegerVariable),("x_ba",IntegerVariable),("x_af",IntegerVariable),("x_u",IntegerVariable),("x_ld",IntegerVariable),("x_fd",IntegerVariable),("x_ed",IntegerVariable),("x_tc",IntegerVariable),("x_td",IntegerVariable),("x_te",IntegerVariable),("x_tb",IntegerVariable)], varBounds = fromList [("x_ec",(Finite 0.0,Finite 1.0)),("x_nd",(Finite 0.0,Finite 1.0)),("x_rb",(Finite 0.0,Finite 40.0)),("x_ya",(Finite 0.0,Finite 1.0)),("x_b",(Finite 0.0,Finite 1.0)),("x_sa",(Finite 0.0,Finite 40.0)),("x_gf",(Finite (-2.0),PosInf)),("x_qe",(Finite (-2.0),PosInf)),("x_oe",(Finite (-2.0),PosInf)),("x_jc",(Finite 0.0,Finite 1.0)),("x_i",(Finite 0.0,Finite 40.0)),("x_ve",(Finite 0.0,PosInf)),("x_ma",(Finite 0.0,Finite 1.0)),("x_hc",(Finite 0.0,Finite 1.0)),("x_ga",(Finite 0.0,Finite 1.0)),("x_aa",(Finite 0.0,Finite 1.0)),("x_jd",(Finite 0.0,Finite 1.0)),("x_ub",(Finite 0.0,Finite 1.0)),("x_pb",(Finite 0.0,Finite 1.0)),("x_de",(Finite 0.0,Finite 1.0)),("x_w",(Finite 0.0,Finite 1.0)),("x_lf",(Finite 0.0,PosInf)),("x_kb",(Finite 0.0,Finite 1.0)),("x_fb",(Finite 0.0,Finite 1.0)),("x_ef",(Finite 0.0,PosInf)),("x_ib",(Finite 0.0,Finite 1.0)),("x_db",(Finite 0.0,Finite 1.0)),("x_cf",(Finite 0.0,Finite 1.0)),("x_xb",(Finite 0.0,Finite 1.0)),("x_ke",(Finite 0.0,Finite 1.0)),("x_nb",(Finite 0.0,Finite 40.0)),("x_e",(Finite 0.0,Finite 1.0)),("x_ze",(Finite 0.0,PosInf)),("x_yc",(Finite 0.0,Finite 1.0)),("x_l",(Finite 0.0,Finite 1.0)),("x_md",(Finite 0.0,Finite 1.0)),("x_gd",(Finite 0.0,Finite 1.0)),("x_oc",(Finite 0.0,Finite 1.0)),("x_ja",(Finite 0.0,Finite 1.0)),("x_k",(Finite 0.0,Finite 40.0)),("x_vc",(Finite 0.0,Finite 1.0)),("x_ue",(Finite 0.0,PosInf)),("x_mc",(Finite 0.0,Finite 1.0)),("x_he",(Finite 0.0,Finite 1.0)),("x_be",(Finite 0.0,Finite 1.0)),("x_ac",(Finite 0.0,Finite 1.0)),("x_pd",(Finite 0.0,Finite 1.0)),("x_we",(Finite (-2.0),PosInf)),("x_q",(Finite 0.0,Finite 40.0)),("x_id",(Finite 0.0,Finite 1.0)),("x_cd",(Finite 0.0,Finite 1.0)),("x_xd",(Finite 0.0,Finite 1.0)),("x_x",(Finite 0.0,Finite 1.0)),("x_zb",(Finite 0.0,Finite 1.0)),("x_g",(Finite 0.0,Finite 1.0)),("x_sb",(Finite 0.0,Finite 1.0)),("x_rf",(Finite 0.0,PosInf)),("x_qb",(Finite 0.0,Finite 1.0)),("x_of",(Finite 0.0,PosInf)),("x_ye",(Finite (-2.0),PosInf)),("x_n",(Finite 0.0,Finite 1.0)),("x_se",(Finite (-2.0),PosInf)),("x_mf",(Finite (-2.0),PosInf)),("x_gb",(Finite 0.0,Finite 40.0)),("x_bb",(Finite 0.0,Finite 1.0)),("x_oa",(Finite 0.0,Finite 1.0)),("x_va",(Finite 0.0,Finite 1.0)),("x_pa",(Finite 0.0,Finite 40.0)),("x_ae",(Finite 0.0,Finite 1.0)),("x_t",(Finite 0.0,Finite 1.0)),("x_le",(Finite 0.0,Finite 40.0)),("x_fe",(Finite 0.0,Finite 40.0)),("x_pf",(Finite (-2.0),PosInf)),("x_da",(Finite 0.0,Finite 1.0)),("x_cc",(Finite 0.0,Finite 1.0)),("x_xa",(Finite 0.0,Finite 1.0)),("x_wc",(Finite 0.0,Finite 1.0)),("x_s",(Finite 0.0,Finite 40.0)),("x_lb",(Finite 0.0,Finite 1.0)),("x_kf",(Finite 0.0,PosInf)),("x_eb",(Finite 0.0,Finite 1.0)),("x_if",(Finite 0.0,PosInf)),("x_ne",(Finite 0.0,Finite 1.0)),("x_z",(Finite 0.0,Finite 40.0)),("x_rc",(Finite 0.0,Finite 1.0)),("x_a",(NegInf,PosInf)),("x_rd",(Finite 0.0,Finite 1.0)),("x_qd",(Finite 0.0,Finite 1.0)),("x_od",(Finite 0.0,Finite 1.0)),("x_h",(Finite 0.0,Finite 40.0)),("x_je",(Finite 0.0,Finite 1.0)),("x_ua",(Finite 0.0,Finite 40.0)),("x_pc",(Finite 0.0,Finite 1.0)),("x_v",(Finite 0.0,Finite 40.0)),("x_fc",(Finite 0.0,Finite 1.0)),("x_ee",(Finite 0.0,Finite 1.0)),("x_ia",(Finite 0.0,Finite 40.0)),("x_dc",(Finite 0.0,Finite 40.0)),("x_ca",(Finite 0.0,Finite 40.0)),("x_xc",(Finite 0.0,Finite 1.0)),("x_wa",(Finite 0.0,Finite 40.0)),("x_kd",(Finite 0.0,Finite 1.0)),("x_nc",(Finite 0.0,Finite 40.0)),("x_d",(Finite 0.0,Finite 40.0)),("x_ra",(Finite 0.0,Finite 40.0)),("x_yb",(Finite 0.0,Finite 1.0)),("x_c",(Finite 0.0,Finite 40.0)),("x_qf",(Finite 0.0,PosInf)),("x_ob",(Finite 0.0,Finite 1.0)),("x_jb",(Finite 0.0,Finite 1.0)),("x_j",(Finite 0.0,Finite 1.0)),("x_vd",(Finite 0.0,Finite 1.0)),("x_ud",(Finite 0.0,Finite 1.0)),("x_mb",(Finite 0.0,Finite 40.0)),("x_hb",(Finite 0.0,Finite 1.0)),("x_bf",(Finite 0.0,Finite 1.0)),("x_ab",(Finite 0.0,Finite 40.0)),("x_uc",(Finite 0.0,Finite 1.0)),("x_pe",(Finite (-2.0),PosInf)),("x_dd",(Finite 0.0,Finite 1.0)),("x_wd",(Finite 0.0,Finite 40.0)),("x_p",(Finite 0.0,Finite 1.0)),("x_la",(Finite 0.0,Finite 40.0)),("x_kc",(Finite 0.0,Finite 40.0)),("x_fa",(Finite 0.0,Finite 1.0)),("x_ic",(Finite 0.0,Finite 40.0)),("x_xe",(Finite (-2.0),PosInf)),("x_na",(Finite 0.0,Finite 1.0)),("x_zc",(Finite 0.0,Finite 1.0)),("x_f",(Finite 0.0,Finite 40.0)),("x_qa",(Finite 0.0,Finite 1.0)),("x_zd",(Finite 0.0,Finite 40.0)),("x_yd",(Finite 0.0,Finite 1.0)),("x_m",(Finite 0.0,Finite 40.0)),("x_sd",(Finite 0.0,Finite 1.0)),("x_me",(Finite 0.0,Finite 1.0)),("x_ge",(Finite 0.0,Finite 1.0)),("x_bc",(Finite 0.0,Finite 40.0)),("x_vb",(Finite 0.0,Finite 40.0)),("x_hd",(Finite 0.0,Finite 1.0)),("x_bd",(Finite 0.0,Finite 1.0)),("x_ad",(Finite 0.0,Finite 1.0)),("x_ff",(Finite 0.0,PosInf)),("x_df",(Finite (-2.0),PosInf)),("x_cb",(Finite 0.0,Finite 1.0)),("x_wb",(Finite 0.0,Finite 1.0)),("x_r",(Finite 0.0,Finite 1.0)),("x_lc",(Finite 0.0,Finite 1.0)),("x_ka",(Finite 0.0,Finite 40.0)),("x_ea",(Finite 0.0,Finite 1.0)),("x_ie",(Finite 0.0,Finite 40.0)),("x_ce",(Finite 0.0,Finite 40.0)),("x_nf",(Finite 0.0,PosInf)),("x_y",(Finite 0.0,Finite 1.0)),("x_za",(Finite 0.0,Finite 1.0)),("x_ta",(Finite 0.0,Finite 1.0)),("x_sc",(Finite 0.0,Finite 1.0)),("x_re",(Finite (-2.0),PosInf)),("x_qc",(Finite 0.0,Finite 1.0)),("x_o",(Finite 0.0,Finite 40.0)),("x_ha",(Finite 0.0,Finite 1.0)),("x_gc",(Finite 0.0,Finite 40.0)),("x_ba",(Finite 0.0,Finite 40.0)),("x_jf",(Finite (-2.0),PosInf)),("x_hf",(Finite 0.0,PosInf)),("x_af",(Finite 0.0,PosInf)),("x_u",(Finite 0.0,Finite 40.0)),("x_ld",(Finite 0.0,Finite 1.0)),("x_fd",(Finite 0.0,Finite 1.0)),("x_ed",(Finite 0.0,Finite 1.0)),("x_tc",(Finite 0.0,Finite 1.0)),("x_td",(Finite 0.0,Finite 1.0)),("x_te",(Finite (-2.0),PosInf)),("x_tb",(Finite 0.0,Finite 1.0))]},((fromList [("x_a",Other "maximumClusterNumber"),("x_aa",Fused Label9 Label12),("x_ab",Pi Label16),("x_ac",Fused Label28 Label31),("x_ad",ManifestOutput Label13),("x_ae",Other "ReadUse_e"),("x_af",BackendSpecific (Dims OutArr Label34)),("x_b",Fused Label1 Label3),("x_ba",Pi Label12),("x_bb",Fused Label16 Label23),("x_bc",Pi Label31),("x_bd",ManifestOutput Label14),("x_be",Other "Read0Pi_f"),("x_bf",ManifestOutput Label3),("x_c",Pi Label3),("x_ca",Pi Label9),("x_cb",Fused Label16 Label25),("x_cc",Fused Label29 Label31),("x_cd",ManifestOutput Label15),("x_ce",Other "ReadPi_g"),("x_cf",ManifestOutput Label35),("x_d",Pi Label1),("x_da",Fused Label9 Label15),("x_db",Fused Label16 Label35),("x_dc",Pi Label29),("x_dd",ManifestOutput Label16),("x_de",Other "ReadUse_h"),("x_df",BackendSpecific (Order OutArr Label8)),("x_e",Fused Label2 Label3),("x_ea",Fused Label9 Label17),("x_eb",Fused Label17 Label16),("x_ec",Fused Label29 Label35),("x_ed",ManifestOutput Label17),("x_ee",Other "Read0Pi_i"),("x_ef",BackendSpecific (Dims InArr Label8)),("x_f",Pi Label2),("x_fa",Fused Label9 Label19),("x_fb",Fused Label18 Label21),("x_fc",Fused Label30 Label29),("x_fd",ManifestOutput Label18),("x_fe",Other "ReadPi_j"),("x_ff",BackendSpecific (Dims OutArr Label8)),("x_g",Fused Label4 Label7),("x_ga",Fused Label9 Label35),("x_gb",Pi Label18),("x_gc",Pi Label30),("x_gd",ManifestOutput Label19),("x_ge",Other "ReadUse_k"),("x_gf",BackendSpecific (Order OutArr Label13)),("x_h",Pi Label7),("x_ha",Fused Label10 Label9),("x_hb",Fused Label18 Label23),("x_hc",Fused Label31 Label34),("x_hd",ManifestOutput Label20),("x_he",Other "Read0Pi_l"),("x_hf",BackendSpecific (Dims InArr Label13)),("x_i",Pi Label4),("x_ia",Pi Label10),("x_ib",Fused Label18 Label25),("x_ic",Pi Label34),("x_id",ManifestOutput Label21),("x_ie",Other "ReadPi_m"),("x_if",BackendSpecific (Dims OutArr Label13)),("x_j",Fused Label4 Label15),("x_ja",Fused Label11 Label13),("x_jb",Fused Label18 Label35),("x_jc",Fused Label32 Label34),("x_jd",ManifestOutput Label22),("x_je",Other "ReadUse_n"),("x_jf",BackendSpecific (Order OutArr Label26)),("x_k",Pi Label15),("x_ka",Pi Label13),("x_kb",Fused Label19 Label18),("x_kc",Pi Label32),("x_kd",ManifestOutput Label23),("x_ke",Other "Read0Pi_o"),("x_kf",BackendSpecific (Dims InArr Label26)),("x_l",Fused Label4 Label17),("x_la",Pi Label11),("x_lb",Fused Label20 Label28),("x_lc",Fused Label32 Label35),("x_ld",ManifestOutput Label24),("x_le",Other "ReadPi_p"),("x_lf",BackendSpecific (Dims OutArr Label26)),("x_m",Pi Label17),("x_ma",Fused Label11 Label35),("x_mb",Pi Label28),("x_mc",Fused Label33 Label32),("x_md",ManifestOutput Label25),("x_me",Other "ReadUse_q"),("x_mf",BackendSpecific (Order OutArr Label27)),("x_n",Fused Label4 Label19),("x_na",Fused Label12 Label11),("x_nb",Pi Label20),("x_nc",Pi Label33),("x_nd",ManifestOutput Label26),("x_ne",Other "Read0Pi_r"),("x_nf",BackendSpecific (Dims InArr Label27)),("x_o",Pi Label19),("x_oa",Fused Label13 Label27),("x_ob",Fused Label20 Label35),("x_oc",Fused Label34 Label35),("x_od",ManifestOutput Label27),("x_oe",BackendSpecific (Order InArr Label8)),("x_of",BackendSpecific (Dims OutArr Label27)),("x_p",Fused Label4 Label35),("x_pa",Pi Label27),("x_pb",Fused Label21 Label20),("x_pc",ManifestOutput Label1),("x_pd",ManifestOutput Label28),("x_pe",BackendSpecific (Order InArr Label13)),("x_pf",BackendSpecific (Order OutArr Label31)),("x_q",Pi Label35),("x_qa",Fused Label14 Label21),("x_qb",Fused Label22 Label26),("x_qc",ManifestOutput Label2),("x_qd",ManifestOutput Label29),("x_qe",BackendSpecific (Order InArr Label26)),("x_qf",BackendSpecific (Dims InArr Label31)),("x_r",Fused Label5 Label4),("x_ra",Pi Label21),("x_rb",Pi Label22),("x_rc",ManifestOutput Label4),("x_rd",ManifestOutput Label30),("x_re",BackendSpecific (Order InArr Label27)),("x_rf",BackendSpecific (Dims OutArr Label31)),("x_s",Pi Label5),("x_sa",Pi Label14),("x_sb",Fused Label22 Label35),("x_sc",ManifestOutput Label5),("x_sd",ManifestOutput Label31),("x_se",BackendSpecific (Order InArr Label28)),("x_t",Fused Label6 Label8),("x_ta",Fused Label14 Label23),("x_tb",Fused Label23 Label22),("x_tc",ManifestOutput Label6),("x_td",ManifestOutput Label32),("x_te",BackendSpecific (Order OutArr Label28)),("x_u",Pi Label8),("x_ua",Pi Label23),("x_ub",Fused Label24 Label27),("x_uc",ManifestOutput Label7),("x_ud",ManifestOutput Label33),("x_ue",BackendSpecific (Dims InArr Label28)),("x_v",Pi Label6),("x_va",Fused Label14 Label25),("x_vb",Pi Label24),("x_vc",ManifestOutput Label8),("x_vd",ManifestOutput Label34),("x_ve",BackendSpecific (Dims OutArr Label28)),("x_w",Fused Label6 Label35),("x_wa",Pi Label25),("x_wb",Fused Label24 Label35),("x_wc",ManifestOutput Label9),("x_wd",Other "ReadPi_a"),("x_we",BackendSpecific (Order InArr Label31)),("x_x",Fused Label7 Label6),("x_xa",Fused Label14 Label35),("x_xb",Fused Label25 Label24),("x_xc",ManifestOutput Label10),("x_xd",Other "ReadUse_b"),("x_xe",BackendSpecific (Order InArr Label34)),("x_y",Fused Label8 Label26),("x_ya",Fused Label15 Label14),("x_yb",Fused Label26 Label28),("x_yc",ManifestOutput Label11),("x_yd",Other "Read0Pi_c"),("x_ye",BackendSpecific (Order OutArr Label34)),("x_z",Pi Label26),("x_za",Fused Label16 Label21),("x_zb",Fused Label27 Label28),("x_zc",ManifestOutput Label12),("x_zd",Other "ReadPi_d"),("x_ze",BackendSpecific (Dims InArr Label34))],fromList [(Pi Label1,"x_d"),(Pi Label2,"x_f"),(Pi Label3,"x_c"),(Pi Label4,"x_i"),(Pi Label5,"x_s"),(Pi Label6,"x_v"),(Pi Label7,"x_h"),(Pi Label8,"x_u"),(Pi Label9,"x_ca"),(Pi Label10,"x_ia"),(Pi Label11,"x_la"),(Pi Label12,"x_ba"),(Pi Label13,"x_ka"),(Pi Label14,"x_sa"),(Pi Label15,"x_k"),(Pi Label16,"x_ab"),(Pi Label17,"x_m"),(Pi Label18,"x_gb"),(Pi Label19,"x_o"),(Pi Label20,"x_nb"),(Pi Label21,"x_ra"),(Pi Label22,"x_rb"),(Pi Label23,"x_ua"),(Pi Label24,"x_vb"),(Pi Label25,"x_wa"),(Pi Label26,"x_z"),(Pi Label27,"x_pa"),(Pi Label28,"x_mb"),(Pi Label29,"x_dc"),(Pi Label30,"x_gc"),(Pi Label31,"x_bc"),(Pi Label32,"x_kc"),(Pi Label33,"x_nc"),(Pi Label34,"x_ic"),(Pi Label35,"x_q"),(Fused Label1 Label3,"x_b"),(Fused Label2 Label3,"x_e"),(Fused Label4 Label7,"x_g"),(Fused Label4 Label15,"x_j"),(Fused Label4 Label17,"x_l"),(Fused Label4 Label19,"x_n"),(Fused Label4 Label35,"x_p"),(Fused Label5 Label4,"x_r"),(Fused Label6 Label8,"x_t"),(Fused Label6 Label35,"x_w"),(Fused Label7 Label6,"x_x"),(Fused Label8 Label26,"x_y"),(Fused Label9 Label12,"x_aa"),(Fused Label9 Label15,"x_da"),(Fused Label9 Label17,"x_ea"),(Fused Label9 Label19,"x_fa"),(Fused Label9 Label35,"x_ga"),(Fused Label10 Label9,"x_ha"),(Fused Label11 Label13,"x_ja"),(Fused Label11 Label35,"x_ma"),(Fused Label12 Label11,"x_na"),(Fused Label13 Label27,"x_oa"),(Fused Label14 Label21,"x_qa"),(Fused Label14 Label23,"x_ta"),(Fused Label14 Label25,"x_va"),(Fused Label14 Label35,"x_xa"),(Fused Label15 Label14,"x_ya"),(Fused Label16 Label21,"x_za"),(Fused Label16 Label23,"x_bb"),(Fused Label16 Label25,"x_cb"),(Fused Label16 Label35,"x_db"),(Fused Label17 Label16,"x_eb"),(Fused Label18 Label21,"x_fb"),(Fused Label18 Label23,"x_hb"),(Fused Label18 Label25,"x_ib"),(Fused Label18 Label35,"x_jb"),(Fused Label19 Label18,"x_kb"),(Fused Label20 Label28,"x_lb"),(Fused Label20 Label35,"x_ob"),(Fused Label21 Label20,"x_pb"),(Fused Label22 Label26,"x_qb"),(Fused Label22 Label35,"x_sb"),(Fused Label23 Label22,"x_tb"),(Fused Label24 Label27,"x_ub"),(Fused Label24 Label35,"x_wb"),(Fused Label25 Label24,"x_xb"),(Fused Label26 Label28,"x_yb"),(Fused Label27 Label28,"x_zb"),(Fused Label28 Label31,"x_ac"),(Fused Label29 Label31,"x_cc"),(Fused Label29 Label35,"x_ec"),(Fused Label30 Label29,"x_fc"),(Fused Label31 Label34,"x_hc"),(Fused Label32 Label34,"x_jc"),(Fused Label32 Label35,"x_lc"),(Fused Label33 Label32,"x_mc"),(Fused Label34 Label35,"x_oc"),(ManifestOutput Label1,"x_pc"),(ManifestOutput Label2,"x_qc"),(ManifestOutput Label3,"x_bf"),(ManifestOutput Label4,"x_rc"),(ManifestOutput Label5,"x_sc"),(ManifestOutput Label6,"x_tc"),(ManifestOutput Label7,"x_uc"),(ManifestOutput Label8,"x_vc"),(ManifestOutput Label9,"x_wc"),(ManifestOutput Label10,"x_xc"),(ManifestOutput Label11,"x_yc"),(ManifestOutput Label12,"x_zc"),(ManifestOutput Label13,"x_ad"),(ManifestOutput Label14,"x_bd"),(ManifestOutput Label15,"x_cd"),(ManifestOutput Label16,"x_dd"),(ManifestOutput Label17,"x_ed"),(ManifestOutput Label18,"x_fd"),(ManifestOutput Label19,"x_gd"),(ManifestOutput Label20,"x_hd"),(ManifestOutput Label21,"x_id"),(ManifestOutput Label22,"x_jd"),(ManifestOutput Label23,"x_kd"),(ManifestOutput Label24,"x_ld"),(ManifestOutput Label25,"x_md"),(ManifestOutput Label26,"x_nd"),(ManifestOutput Label27,"x_od"),(ManifestOutput Label28,"x_pd"),(ManifestOutput Label29,"x_qd"),(ManifestOutput Label30,"x_rd"),(ManifestOutput Label31,"x_sd"),(ManifestOutput Label32,"x_td"),(ManifestOutput Label33,"x_ud"),(ManifestOutput Label34,"x_vd"),(ManifestOutput Label35,"x_cf"),(Other "Read0Pi_c","x_yd"),(Other "Read0Pi_f","x_be"),(Other "Read0Pi_i","x_ee"),(Other "Read0Pi_l","x_he"),(Other "Read0Pi_o","x_ke"),(Other "Read0Pi_r","x_ne"),(Other "ReadPi_a","x_wd"),(Other "ReadPi_d","x_zd"),(Other "ReadPi_g","x_ce"),(Other "ReadPi_j","x_fe"),(Other "ReadPi_m","x_ie"),(Other "ReadPi_p","x_le"),(Other "ReadUse_b","x_xd"),(Other "ReadUse_e","x_ae"),(Other "ReadUse_h","x_de"),(Other "ReadUse_k","x_ge"),(Other "ReadUse_n","x_je"),(Other "ReadUse_q","x_me"),(Other "maximumClusterNumber","x_a"),(BackendSpecific (Order InArr Label8),"x_oe"),(BackendSpecific (Order InArr Label13),"x_pe"),(BackendSpecific (Order InArr Label26),"x_qe"),(BackendSpecific (Order InArr Label27),"x_re"),(BackendSpecific (Order InArr Label28),"x_se"),(BackendSpecific (Order InArr Label31),"x_we"),(BackendSpecific (Order InArr Label34),"x_xe"),(BackendSpecific (Order OutArr Label8),"x_df"),(BackendSpecific (Order OutArr Label13),"x_gf"),(BackendSpecific (Order OutArr Label26),"x_jf"),(BackendSpecific (Order OutArr Label27),"x_mf"),(BackendSpecific (Order OutArr Label28),"x_te"),(BackendSpecific (Order OutArr Label31),"x_pf"),(BackendSpecific (Order OutArr Label34),"x_ye"),(BackendSpecific (Dims InArr Label8),"x_ef"),(BackendSpecific (Dims InArr Label13),"x_hf"),(BackendSpecific (Dims InArr Label26),"x_kf"),(BackendSpecific (Dims InArr Label27),"x_nf"),(BackendSpecific (Dims InArr Label28),"x_ue"),(BackendSpecific (Dims InArr Label31),"x_qf"),(BackendSpecific (Dims InArr Label34),"x_ze"),(BackendSpecific (Dims OutArr Label8),"x_ff"),(BackendSpecific (Dims OutArr Label13),"x_if"),(BackendSpecific (Dims OutArr Label26),"x_lf"),(BackendSpecific (Dims OutArr Label27),"x_of"),(BackendSpecific (Dims OutArr Label28),"x_ve"),(BackendSpecific (Dims OutArr Label31),"x_rf"),(BackendSpecific (Dims OutArr Label34),"x_af")]),"rf"))
OriginalAcc:
\a0 a1 ->
  fold
    (\x0 x1 -> x0 + x1)
    0.0
    (backpermute
       (let T2 x0 x1 = (shape a0) in T2 x0 x1, let T2 x0 x1 = (shape a1) in x1)
       (\(T3 x0 x1 x2) -> let T2 x3 x4 = T2 x0 x1 in T3 x3 x2 x4)
       (zipWith
          (\x0 x1 -> x0 * x1)
          (replicate
             (let () = () in T2 () (), let T2 x0 x1 = (shape a1) in x1)
             a0)
          (replicate
             (let () = ()
              in
              T3 (let T1 x0 = let T2 x0 x1 = (shape a0) in T1 x0 in x0) () ())
             a1)))

Desugared OperationAcc:
\T3 (e0: Int) (e1: Int) (b0: [Float]) ->
  \T3 (e2: Int) (e3: Int) (b1: [Float]) ->
    T2 () () = compute let () = () in T2 () ()
    e4: Int = compute let T2 x0 x1 = T2 e2 e3 in x1
    T3 (e5: Int) (e6: Int) (e7: Int) =
      compute indexFull (T3 () () e4) (T2 e0 e1)
    b2: [Float]¹ = alloc Float[Z :. e5 :. e6 :. e7]
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> indexSlice (T3 () () e4) (T3 x0 x1 x2)
      , in (Z :. e0 :. e1) b0
      , out (Z :. e5 :. e6 :. e7) b2 )
    T3 (e8: Int) () () =
      compute
        let () = ()
        in
        T3 (let T1 x0 = let T2 x0 x1 = T2 e0 e1 in T1 x0 in x0) () ()
    T3 (e9: Int) (e10: Int) (e11: Int) =
      compute indexFull (T3 e8 () ()) (T2 e2 e3)
    b3: [Float]¹ = alloc Float[Z :. e9 :. e10 :. e11]
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> indexSlice (T3 e8 () ()) (T3 x0 x1 x2)
      , in (Z :. e2 :. e3) b1
      , out (Z :. e9 :. e10 :. e11) b3 )
    e12: Int = compute min e5 e9
    e13: Int = compute min e6 e10
    e14: Int = compute min e7 e11
    b4: [Float]¹ = alloc Float[Z :. e12 :. e13 :. e14]
    b5: [Float]¹ = alloc Float[Z :. e12 :. e13 :. e14]
    b6: [Float]¹ = alloc Float[Z :. e12 :. e13 :. e14]
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> T3 x0 x1 x2
      , in (Z :. e5 :. e6 :. e7) b2
      , out (Z :. e12 :. e13 :. e14) b5 )
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> T3 x0 x1 x2
      , in (Z :. e9 :. e10 :. e11) b3
      , out (Z :. e12 :. e13 :. e14) b6 )
    execute
      map
      ( \(x0, x1) -> x0 * x1
      , in (Z :. e12 :. e13 :. e14) (b5, b6)
      , out (Z :. e12 :. e13 :. e14) b4 )
    T2 (e15: Int) (e16: Int) = compute let T2 x0 x1 = T2 e0 e1 in T2 x0 x1
    e17: Int = compute let T2 x0 x1 = T2 e2 e3 in x1
    b7: [Float]¹ = alloc Float[Z :. e15 :. e16 :. e17]
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> let T2 x3 x4 = T2 x0 x1 in T3 x3 x2 x4
      , in (Z :. e12 :. e13 :. e14) b4
      , out (Z :. e15 :. e16 :. e17) b7 )
    b8: [Float]¹ = alloc Float[Z :. e15 :. e16]
    b9: [Float]¹ = alloc Float[Z :. e15 :. e16]
    execute
      fold-2
      ( \x0 x1 -> x0 + x1
      , in (Z :. e15 :. e16 :. e17) b7
      , out (Z :. e15 :. e16) b9 )
    execute
      map
      ( \x0 -> let (x1, x2) = (0.0, x0) in x1 + x2
      , in (Z :. e15 :. e16) b9
      , out (Z :. e15 :. e16) b8 )
    return (T3 e15 e16 b8)

Simplified OperationAcc:
\T3 (e0: Int) (e1: Int) (b0: [Float]) ->
  \T3 (e2: Int) (e3: Int) (b1: [Float]) ->
    T3 (e4: Int) (e5: Int) (e6: Int) =
      compute indexFull (T3 () () e3) (T2 e0 e1)
    b2: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> indexSlice (T3 () () e3) (T3 x0 x1 x2)
      , in (Z :. e0 :. e1) b0
      , out (Z :. e4 :. e5 :. e6) b2 )
    T3 (e7: Int) (e8: Int) (e9: Int) =
      compute indexFull (T3 e0 () ()) (T2 e2 e3)
    b3: [Float]¹ = alloc Float[Z :. e7 :. e8 :. e9]
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> indexSlice (T3 e0 () ()) (T3 x0 x1 x2)
      , in (Z :. e2 :. e3) b1
      , out (Z :. e7 :. e8 :. e9) b3 )
    e10: Int = compute min e4 e7
    e11: Int = compute min e5 e8
    e12: Int = compute min e6 e9
    b4: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e12]
    b5: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e12]
    b6: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e12]
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> T3 x0 x1 x2
      , in (Z :. e4 :. e5 :. e6) b2
      , out (Z :. e10 :. e11 :. e12) b5 )
    execute
    \* Problem: AccelerateILP *\
MINIMIZE
AccelerateObjective: + x_a
SUBJECT TO
+ x_b - x_c + x_d <= 0.0
+ x_c - x_d - 40.0 x_b <= 0.0
+ x_e - x_c + x_f <= 0.0
+ x_c - x_f - 40.0 x_e <= 0.0
+ x_g - x_h + x_i <= 0.0
+ x_h - x_i - 40.0 x_g <= 0.0
+ x_j - x_k + x_i <= 0.0
+ x_k - x_i - 40.0 x_j <= 0.0
+ x_l - x_m + x_i <= 0.0
+ x_m - x_i - 40.0 x_l <= 0.0
+ x_n - x_o + x_i <= 0.0
+ x_o - x_i - 40.0 x_n <= 0.0
+ x_p - x_q + x_i <= 0.0
+ x_q - x_i - 40.0 x_p <= 0.0
+ x_r - x_i + x_s <= 0.0
+ x_i - x_s - 40.0 x_r <= 0.0
+ x_t - x_u + x_v <= 0.0
+ x_u - x_v - 40.0 x_t <= 0.0
+ x_w - x_q + x_v <= 0.0
+ x_q - x_v - 40.0 x_w <= 0.0
+ x_x - x_v + x_h <= 0.0
+ x_v - x_h - 40.0 x_x <= 0.0
+ x_y - x_z + x_u <= 0.0
+ x_z - x_u - 40.0 x_y <= 0.0
+ x_aa - x_ba + x_ca <= 0.0
+ x_ba - x_ca - 40.0 x_aa <= 0.0
+ x_da - x_k + x_ca <= 0.0
+ x_k - x_ca - 40.0 x_da <= 0.0
+ x_ea - x_m + x_ca <= 0.0
+ x_m - x_ca - 40.0 x_ea <= 0.0
+ x_fa - x_o + x_ca <= 0.0
+ x_o - x_ca - 40.0 x_fa <= 0.0
+ x_ga - x_q + x_ca <= 0.0
+ x_q - x_ca - 40.0 x_ga <= 0.0
+ x_ha - x_ca + x_ia <= 0.0
+ x_ca - x_ia - 40.0 x_ha <= 0.0
+ x_ja - x_ka + x_la <= 0.0
+ x_ka - x_la - 40.0 x_ja <= 0.0
+ x_ma - x_q + x_la <= 0.0
+ x_q - x_la - 40.0 x_ma <= 0.0
+ x_na - x_la + x_ba <= 0.0
+ x_la - x_ba - 40.0 x_na <= 0.0
+ x_oa - x_pa + x_ka <= 0.0
+ x_pa - x_ka - 40.0 x_oa <= 0.0
+ x_qa - x_ra + x_sa <= 0.0
+ x_ra - x_sa - 40.0 x_qa <= 0.0
+ x_ta - x_ua + x_sa <= 0.0
+ x_ua - x_sa - 40.0 x_ta <= 0.0
+ x_va - x_wa + x_sa <= 0.0
+ x_wa - x_sa - 40.0 x_va <= 0.0
+ x_xa - x_q + x_sa <= 0.0
+ x_q - x_sa - 40.0 x_xa <= 0.0
+ x_ya - x_sa + x_k <= 0.0
+ x_sa - x_k - 40.0 x_ya <= 0.0
+ x_za - x_ra + x_ab <= 0.0
+ x_ra - x_ab - 40.0 x_za <= 0.0
+ x_bb - x_ua + x_ab <= 0.0
+ x_ua - x_ab - 40.0 x_bb <= 0.0
+ x_cb - x_wa + x_ab <= 0.0
+ x_wa - x_ab - 40.0 x_cb <= 0.0
+ x_db - x_q + x_ab <= 0.0
+ x_q - x_ab - 40.0 x_db <= 0.0
+ x_eb - x_ab + x_m <= 0.0
+ x_ab - x_m - 40.0 x_eb <= 0.0
+ x_fb - x_ra + x_gb <= 0.0
+ x_ra - x_gb - 40.0 x_fb <= 0.0
+ x_hb - x_ua + x_gb <= 0.0
+ x_ua - x_gb - 40.0 x_hb <= 0.0
+ x_ib - x_wa + x_gb <= 0.0
+ x_wa - x_gb - 40.0 x_ib <= 0.0
+ x_jb - x_q + x_gb <= 0.0
+ x_q - x_gb - 40.0 x_jb <= 0.0
+ x_kb - x_gb + x_o <= 0.0
+ x_gb - x_o - 40.0 x_kb <= 0.0
+ x_lb - x_mb + x_nb <= 0.0
+ x_mb - x_nb - 40.0 x_lb <= 0.0
+ x_ob - x_q + x_nb <= 0.0
+ x_q - x_nb - 40.0 x_ob <= 0.0
+ x_pb - x_nb + x_ra <= 0.0
+ x_nb - x_ra - 40.0 x_pb <= 0.0
+ x_qb - x_z + x_rb <= 0.0
+ x_z - x_rb - 40.0 x_qb <= 0.0
+ x_sb - x_q + x_rb <= 0.0
+ x_q - x_rb - 40.0 x_sb <= 0.0
+ x_tb - x_rb + x_ua <= 0.0
+ x_rb - x_ua - 40.0 x_tb <= 0.0
+ x_ub - x_pa + x_vb <= 0.0
+ x_pa - x_vb - 40.0 x_ub <= 0.0
+ x_wb - x_q + x_vb <= 0.0
+ x_q - x_vb - 40.0 x_wb <= 0.0
+ x_xb - x_vb + x_wa <= 0.0
+ x_vb - x_wa - 40.0 x_xb <= 0.0
+ x_yb - x_mb + x_z <= 0.0
+ x_mb - x_z - 40.0 x_yb <= 0.0
+ x_zb - x_mb + x_pa <= 0.0
+ x_mb - x_pa - 40.0 x_zb <= 0.0
+ x_ac - x_bc + x_mb <= 0.0
+ x_bc - x_mb - 40.0 x_ac <= 0.0
+ x_cc - x_bc + x_dc <= 0.0
+ x_bc - x_dc - 40.0 x_cc <= 0.0
+ x_ec - x_q + x_dc <= 0.0
+ x_q - x_dc - 40.0 x_ec <= 0.0
+ x_fc - x_dc + x_gc <= 0.0
+ x_dc - x_gc - 40.0 x_fc <= 0.0
+ x_hc - x_ic + x_bc <= 0.0
+ x_ic - x_bc - 40.0 x_hc <= 0.0
+ x_jc - x_ic + x_kc <= 0.0
+ x_ic - x_kc - 40.0 x_jc <= 0.0
+ x_lc - x_q + x_kc <= 0.0
+ x_q - x_kc - 40.0 x_lc <= 0.0
+ x_mc - x_kc + x_nc <= 0.0
+ x_kc - x_nc - 40.0 x_mc <= 0.0
+ x_oc - x_q + x_ic <= 0.0
+ x_q - x_ic - 40.0 x_oc <= 0.0
+ x_b = 1.0
+ x_e = 1.0
+ x_g = 1.0
+ x_j = 1.0
+ x_l = 1.0
+ x_n = 1.0
+ x_p = 1.0
+ x_r = 1.0
+ x_t = 1.0
+ x_w = 1.0
+ x_x = 1.0
+ x_aa = 1.0
+ x_da = 1.0
+ x_ea = 1.0
+ x_fa = 1.0
+ x_ga = 1.0
+ x_ha = 1.0
+ x_ja = 1.0
+ x_ma = 1.0
+ x_na = 1.0
+ x_qa = 1.0
+ x_ta = 1.0
+ x_va = 1.0
+ x_xa = 1.0
+ x_ya = 1.0
+ x_za = 1.0
+ x_bb = 1.0
+ x_cb = 1.0
+ x_db = 1.0
+ x_eb = 1.0
+ x_fb = 1.0
+ x_hb = 1.0
+ x_ib = 1.0
+ x_jb = 1.0
+ x_kb = 1.0
+ x_lb = 1.0
+ x_ob = 1.0
+ x_pb = 1.0
+ x_qb = 1.0
+ x_sb = 1.0
+ x_tb = 1.0
+ x_ub = 1.0
+ x_wb = 1.0
+ x_xb = 1.0
+ x_cc = 1.0
+ x_ec = 1.0
+ x_fc = 1.0
+ x_jc = 1.0
+ x_lc = 1.0
+ x_mc = 1.0
+ xJust (fromList [(Pi Label1,0),(Pi Label2,0),(Pi Label3,1),(Pi Label4,1),(Pi Label5,0),(Pi Label6,3),(Pi Label7,2),(Pi Label8,4),(Pi Label9,1),(Pi Label10,0),(Pi Label11,3),(Pi Label12,2),(Pi Label13,4),(Pi Label14,3),(Pi Label15,2),(Pi Label16,3),(Pi Label17,2),(Pi Label18,3),(Pi Label19,2),(Pi Label20,5),(Pi Label21,4),(Pi Label22,5),(Pi Label23,4),(Pi Label24,5),(Pi Label25,4),(Pi Label26,6),(Pi Label27,6),(Pi Label28,6),(Pi Label29,1),(Pi Label30,0),(Pi Label31,6),(Pi Label32,1),(Pi Label33,0),(Pi Label34,6),(Pi Label35,7),(Fused Label1 Label3,1),(Fused Label2 Label3,1),(Fused Label4 Label7,1),(Fused Label4 Label15,1),(Fused Label4 Label17,1),(Fused Label4 Label19,1),(Fused Label4 Label35,1),(Fused Label5 Label4,1),(Fused Label6 Label8,1),(Fused Label6 Label35,1),(Fused Label7 Label6,1),(Fused Label8 Label26,1),(Fused Label9 Label12,1),(Fused Label9 Label15,1),(Fused Label9 Label17,1),(Fused Label9 Label19,1),(Fused Label9 Label35,1),(Fused Label10 Label9,1),(Fused Label11 Label13,1),(Fused Label11 Label35,1),(Fused Label12 Label11,1),(Fused Label13 Label27,1),(Fused Label14 Label21,1),(Fused Label14 Label23,1),(Fused Label14 Label25,1),(Fused Label14 Label35,1),(Fused Label15 Label14,1),(Fused Label16 Label21,1),(Fused Label16 Label23,1),(Fused Label16 Label25,1),(Fused Label16 Label35,1),(Fused Label17 Label16,1),(Fused Label18 Label21,1),(Fused Label18 Label23,1),(Fused Label18 Label25,1),(Fused Label18 Label35,1),(Fused Label19 Label18,1),(Fused Label20 Label28,1),(Fused Label20 Label35,1),(Fused Label21 Label20,1),(Fused Label22 Label26,1),(Fused Label22 Label35,1),(Fused Label23 Label22,1),(Fused Label24 Label27,1),(Fused Label24 Label35,1),(Fused Label25 Label24,1),(Fused Label26 Label28,0),(Fused Label27 Label28,0),(Fused Label28 Label31,0),(Fused Label29 Label31,1),(Fused Label29 Label35,1),(Fused Label30 Label29,1),(Fused Label31 Label34,0),(Fused Label32 Label34,1),(Fused Label32 Label35,1),(Fused Label33 Label32,1),(Fused Label34 Label35,1),(ManifestOutput Label1,0),(ManifestOutput Label2,0),(ManifestOutput Label3,0),(ManifestOutput Label4,0),(ManifestOutput Label5,0),(ManifestOutput Label6,0),(ManifestOutput Label7,0),(ManifestOutput Label8,0),(ManifestOutput Label9,0),(ManifestOutput Label10,0),(ManifestOutput Label11,0),(ManifestOutput Label12,0),(ManifestOutput Label13,0),(ManifestOutput Label14,0),(ManifestOutput Label15,0),(ManifestOutput Label16,0),(ManifestOutput Label17,0),(ManifestOutput Label18,0),(ManifestOutput Label19,0),(ManifestOutput Label20,0),(ManifestOutput Label21,0),(ManifestOutput Label22,0),(ManifestOutput Label23,0),(ManifestOutput Label24,0),(ManifestOutput Label25,0),(ManifestOutput Label26,0),(ManifestOutput Label27,0),(ManifestOutput Label28,0),(ManifestOutput Label29,0),(ManifestOutput Label30,0),(ManifestOutput Label31,0),(ManifestOutput Label32,0),(ManifestOutput Label33,0),(ManifestOutput Label34,0),(ManifestOutput Label35,0),(Other "Read0Pi_c",1),(Other "Read0Pi_f",1),(Other "Read0Pi_i",1),(Other "Read0Pi_l",1),(Other "Read0Pi_o",1),(Other "Read0Pi_r",1),(Other "ReadPi_a",6),(Other "ReadPi_d",6),(Other "ReadPi_g",6),(Other "ReadPi_j",6),(Other "ReadPi_m",6),(Other "ReadPi_p",6),(Other "ReadUse_b",0),(Other "ReadUse_e",0),(Other "ReadUse_h",0),(Other "ReadUse_k",0),(Other "ReadUse_n",0),(Other "ReadUse_q",0),(Other "maximumClusterNumber",7),(BackendSpecific (Order InArr Label8),8),(BackendSpecific (Order InArr Label13),13),(BackendSpecific (Order InArr Label26),26),(BackendSpecific (Order InArr Label27),27),(BackendSpecific (Order InArr Label28),-2),(BackendSpecific (Order InArr Label31),31),(BackendSpecific (Order InArr Label34),-2),(BackendSpecific (Order OutArr Label8),-2),(BackendSpecific (Order OutArr Label13),-2),(BackendSpecific (Order OutArr Label26),-2),(BackendSpecific (Order OutArr Label27),-2),(BackendSpecific (Order OutArr Label28),-2),(BackendSpecific (Order OutArr Label31),-2),(BackendSpecific (Order OutArr Label34),-2),(BackendSpecific (Dims InArr Label8),0),(BackendSpecific (Dims InArr Label13),0),(BackendSpecific (Dims InArr Label26),0),(BackendSpecific (Dims InArr Label27),0),(BackendSpecific (Dims InArr Label28),0),(BackendSpecific (Dims InArr Label31),0),(BackendSpecific (Dims InArr Label34),2),(BackendSpecific (Dims OutArr Label8),0),(BackendSpecific (Dims OutArr Label13),0),(BackendSpecific (Dims OutArr Label26),0),(BackendSpecific (Dims OutArr Label27),0),(BackendSpecific (Dims OutArr Label28),0),(BackendSpecific (Dims OutArr Label31),0),(BackendSpecific (Dims OutArr Label34),0)])
_oc = 1.0
- x_b - x_pc >= -1.0
- x_e - x_qc >= -1.0
- x_g - x_rc >= -1.0
- x_j - x_rc >= -1.0
- x_l - x_rc >= -1.0
- x_n - x_rc >= -1.0
- x_p - x_rc >= -1.0
- x_r - x_sc >= -1.0
- x_t - x_tc >= -1.0
- x_w - x_tc >= -1.0
- x_x - x_uc >= -1.0
- x_y - x_vc >= -1.0
- x_aa - x_wc >= -1.0
- x_da - x_wc >= -1.0
- x_ea - x_wc >= -1.0
- x_fa - x_wc >= -1.0
- x_ga - x_wc >= -1.0
- x_ha - x_xc >= -1.0
- x_ja - x_yc >= -1.0
- x_ma - x_yc >= -1.0
- x_na - x_zc >= -1.0
- x_oa - x_ad >= -1.0
- x_qa - x_bd >= -1.0
- x_ta - x_bd >= -1.0
- x_va - x_bd >= -1.0
- x_xa - x_bd >= -1.0
- x_ya - x_cd >= -1.0
- x_za - x_dd >= -1.0
- x_bb - x_dd >= -1.0
- x_cb - x_dd >= -1.0
- x_db - x_dd >= -1.0
- x_eb - x_ed >= -1.0
- x_fb - x_fd >= -1.0
- x_hb - x_fd >= -1.0
- x_ib - x_fd >= -1.0
- x_jb - x_fd >= -1.0
- x_kb - x_gd >= -1.0
- x_lb - x_hd >= -1.0
- x_ob - x_hd >= -1.0
- x_pb - x_id >= -1.0
- x_qb - x_jd >= -1.0
- x_sb - x_jd >= -1.0
- x_tb - x_kd >= -1.0
- x_ub - x_ld >= -1.0
- x_wb - x_ld >= -1.0
- x_xb - x_md >= -1.0
- x_yb - x_nd >= -1.0
- x_zb - x_od >= -1.0
- x_ac - x_pd >= -1.0
- x_cc - x_qd >= -1.0
- x_ec - x_qd >= -1.0
- x_fc - x_rd >= -1.0
- x_hc - x_sd >= -1.0
- x_jc - x_td >= -1.0
- x_lc - x_td >= -1.0
- x_mc - x_ud >= -1.0
- x_oc - x_vd >= -1.0
+ x_d - x_a <= 0.0
+ x_f - x_a <= 0.0
+ x_c - x_a <= 0.0
+ x_i - x_a <= 0.0
+ x_s - x_a <= 0.0
+ x_v - x_a <= 0.0
+ x_h - x_a <= 0.0
+ x_u - x_a <= 0.0
+ x_ca - x_a <= 0.0
+ x_ia - x_a <= 0.0
+ x_la - x_a <= 0.0
+ x_ba - x_a <= 0.0
+ x_ka - x_a <= 0.0
+ x_sa - x_a <= 0.0
+ x_k - x_a <= 0.0
+ x_ab - x_a <= 0.0
+ x_m - x_a <= 0.0
+ x_gb - x_a <= 0.0
+ x_o - x_a <= 0.0
+ x_nb - x_a <= 0.0
+ x_ra - x_a <= 0.0
+ x_rb - x_a <= 0.0
+ x_ua - x_a <= 0.0
+ x_vb - x_a <= 0.0
+ x_wa - x_a <= 0.0
+ x_z - x_a <= 0.0
+ x_pa - x_a <= 0.0
+ x_mb - x_a <= 0.0
+ x_dc - x_a <= 0.0
+ x_gc - x_a <= 0.0
+ x_bc - x_a <= 0.0
+ x_kc - x_a <= 0.0
+ x_nc - x_a <= 0.0
+ x_ic - x_a <= 0.0
+ x_q - x_a <= 0.0
+ x_wd - 40.0 x_xd - x_z <= 0.0
+ x_z - x_wd - 40.0 x_xd <= 0.0
+ x_xd = 0.0
+ x_wd - 40.0 x_yd <= 0.0
+ x_zd - 40.0 x_ae - x_pa <= 0.0
+ x_pa - x_zd - 40.0 x_ae <= 0.0
+ x_ae = 0.0
+ x_zd - 40.0 x_be <= 0.0
+ x_ce - 40.0 x_de - x_mb <= 0.0
+ x_mb - x_ce - 40.0 x_de <= 0.0
+ x_de = 0.0
+ x_ce - 40.0 x_ee <= 0.0
+ x_fe - 40.0 x_ge - x_mb <= 0.0
+ x_mb - x_fe - 40.0 x_ge <= 0.0
+ x_ge = 0.0
+ x_fe - 40.0 x_he <= 0.0
+ x_ie - 40.0 x_je - x_bc <= 0.0
+ x_bc - x_ie - 40.0 x_je <= 0.0
+ x_je = 0.0
+ x_ie - 40.0 x_ke <= 0.0
+ x_le - 40.0 x_me - x_ic <= 0.0
+ x_ic - x_le - 40.0 x_me <= 0.0
+ x_me = 0.0
+ x_le - 40.0 x_ne <= 0.0
+ x_oe = 8.0
+ x_pe = 13.0
+ x_qe = 26.0
+ x_re = 27.0
+ x_se - x_te = 0.0
+ x_ue - x_ve = 0.0
+ x_we = 31.0
+ x_xe - x_ye = 0.0
+ x_ze - x_af = 2.0
BOUNDS
0.0 <= x_rb <= 40.0
0.0 <= x_sa <= 40.0
-2.0 <= x_gf <= +inf
-2.0 <= x_qe <= +inf
-2.0 <= x_oe <= +inf
0.0 <= x_i <= 40.0
0.0 <= x_ve <= +inf
0.0 <= x_lf <= +inf
0.0 <= x_ef <= +inf
0.0 <= x_cf <= 1.0
0.0 <= x_nb <= 40.0
0.0 <= x_ze <= +inf
0.0 <= x_k <= 40.0
0.0 <= x_ue <= +inf
-2.0 <= x_we <= +inf
0.0 <= x_q <= 40.0
0.0 <= x_rf <= +inf
0.0 <= x_of <= +inf
-2.0 <= x_ye <= +inf
-2.0 <= x_se <= +inf
-2.0 <= x_mf <= +inf
0.0 <= x_gb <= 40.0
0.0 <= x_pa <= 40.0
0.0 <= x_le <= 40.0
0.0 <= x_fe <= 40.0
-2.0 <= x_pf <= +inf
0.0 <= x_s <= 40.0
0.0 <= x_kf <= +inf
0.0 <= x_if <= +inf
0.0 <= x_z <= 40.0
-inf <= x_a <= +inf
0.0 <= x_h <= 40.0
0.0 <= x_ua <= 40.0
0.0 <= x_v <= 40.0
0.0 <= x_ia <= 40.0
0.0 <= x_dc <= 40.0
0.0 <= x_ca <= 40.0
0.0 <= x_wa <= 40.0
0.0 <= x_nc <= 40.0
0.0 <= x_d <= 40.0
0.0 <= x_ra <= 40.0
0.0 <= x_c <= 40.0
0.0 <= x_qf <= +inf
0.0 <= x_mb <= 40.0
0.0 <= x_bf <= 1.0
0.0 <= x_ab <= 40.0
-2.0 <= x_pe <= +inf
0.0 <= x_wd <= 40.0
0.0 <= x_la <= 40.0
0.0 <= x_kc <= 40.0
0.0 <= x_ic <= 40.0
-2.0 <= x_xe <= +inf
0.0 <= x_f <= 40.0
0.0 <= x_zd <= 40.0
0.0 <= x_m <= 40.0
0.0 <= x_bc <= 40.0
0.0 <= x_vb <= 40.0
0.0 <= x_ff <= +inf
-2.0 <= x_df <= +inf
0.0 <= x_ka <= 40.0
0.0 <= x_ie <= 40.0
0.0 <= x_ce <= 40.0
0.0 <= x_nf <= +inf
-2.0 <= x_re <= +inf
0.0 <= x_o <= 40.0
0.0 <= x_gc <= 40.0
0.0 <= x_ba <= 40.0
-2.0 <= x_jf <= +inf
0.0 <= x_hf <= +inf
0.0 <= x_af <= +inf
0.0 <= x_u <= 40.0
-2.0 <= x_te <= +inf
GENERALS
x_rb x_sa x_qe x_oe x_i x_ve x_nb x_ze x_k x_ue x_we x_q x_ye x_se x_gb x_pa
x_le x_fe x_s x_z x_a x_h x_ua x_v x_ia x_dc x_ca x_wa x_nc x_d x_ra x_c x_mb
x_ab x_pe x_wd x_la x_kc x_ic x_xe x_f x_zd x_m x_bc x_vb x_ka x_ie x_ce x_re
x_o x_gc x_ba x_af x_u x_te
BINARIES
x_ec x_nd x_ya x_b x_jc x_ma x_hc x_ga x_aa x_jd x_ub x_pb x_de x_w x_kb x_fb
x_ib x_db x_xb x_ke x_e x_yc x_l x_md x_gd x_oc x_ja x_vc x_mc x_he x_be x_ac
x_pd x_id x_cd x_xd x_x x_zb x_g x_sb x_qb x_n x_bb x_oa x_va x_ae x_t x_da x_cc
x_xa x_wc x_lb x_eb x_ne x_rc x_rd x_qd x_od x_je x_pc x_fc x_ee x_xc x_kd x_yb
x_ob x_jb x_j x_vd x_ud x_hb x_uc x_dd x_p x_fa x_na x_zc x_qa x_yd x_sd x_me
x_ge x_hd x_bd x_ad x_cb x_wb x_r x_lc x_ea x_y x_za x_ta x_sc x_qc x_ha x_ld
x_fd x_ed x_tc x_td x_tb
END
AccILPSolver: Academic license - for non-commercial use only - expires 2023-10-05
AccILPSolver: Using license file /home/david/gurobi.lic
AccILPSolver: Set parameter LogFile to value gurobi.log
AccILPSolver: 
AccILPSolver: Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (linux64)
AccILPSolver: Copyright (c) 2020, Gurobi Optimization, LLC
AccILPSolver: 
AccILPSolver: Warning: unknown variable 'x_gf' in bounds section
AccILPSolver: Warning: unknown variable 'x_lf' in bounds section
AccILPSolver: Warning: unknown variable 'x_ef' in bounds section
AccILPSolver: Warning: unknown variable 'x_cf' in bounds section
AccILPSolver: Warning: unknown variable 'x_rf' in bounds section
AccILPSolver: Warning: unknown variable 'x_of' in bounds section
AccILPSolver: Warning: unknown variable 'x_mf' in bounds section
AccILPSolver: Warning: unknown variable 'x_pf' in bounds section
AccILPSolver: Warning: unknown variable 'x_kf' in bounds section
AccILPSolver: Warning: unknown variable 'x_if' in bounds section
AccILPSolver: Warning: unknown variable 'x_qf' in bounds section
AccILPSolver: Warning: unknown variable 'x_bf' in bounds section
AccILPSolver: Warning: unknown variable 'x_ff' in bounds section
AccILPSolver: Warning: unknown variable 'x_df' in bounds section
AccILPSolver: Warning: unknown variable 'x_nf' in bounds section
AccILPSolver: Warning: unknown variable 'x_jf' in bounds section
AccILPSolver: Warning: unknown variable 'x_hf' in bounds section
AccILPSolver: Read LP format model from file /tmp/gurobi14393-0.lp
AccILPSolver: Reading time = 0.00 seconds
AccILPSolver: AccelerateObjective: 290 rows, 174 columns, 644 nonzeros
AccILPSolver: Thread count: 6 physical cores, 12 logical processors, using up to 12 threads
AccILPSolver: Optimize a model with 290 rows, 174 columns and 644 nonzeros
AccILPSolver: Model fingerprint: 0x87f9934b
AccILPSolver: Variable types: 17 continuous, 157 integer (102 binary)
AccILPSolver: Coefficient statistics:
AccILPSolver:   Matrix range     [1e+00, 4e+01]
AccILPSolver:   Objective range  [1e+00, 1e+00]
AccILPSolver:   Bounds range     [1e+00, 4e+01]
AccILPSolver:   RHS range        [1e+00, 3e+01]
AccILPSolver: Found heuristic solution: objective 7.0000000
AccILPSolver: Presolve removed 290 rows and 174 columns
AccILPSolver: Presolve time: 0.00s
AccILPSolver: Presolve: All rows and columns removed
AccILPSolver: 
AccILPSolver: Explored 0 nodes (0 simplex iterations) in 0.00 seconds
AccILPSolver: Thread count was 1 (of 12 available processors)
AccILPSolver: 
AccILPSolver: Solution count 1: 7 
AccILPSolver: 
AccILPSolver: Optimal solution found (tolerance 1.00e-04)
AccILPSolver: Best objective 7.000000000000e+00, best bound 7.000000000000e+00, gap 0.0000%
AccILPSolver: 
AccILPSolver: Wrote result file '/tmp/gurobi14393-1.sol'
AccILPSolver: 
  backpermute
      ( \(T3 x0 x1 x2) -> T3 x0 x1 x2
      , in (Z :. e7 :. e8 :. e9) b3
      , out (Z :. e10 :. e11 :. e12) b6 )
    execute
      map
      ( \(x0, x1) -> x0 * x1
      , in (Z :. e10 :. e11 :. e12) (b5, b6)
      , out (Z :. e10 :. e11 :. e12) b4 )
    b7: [Float]¹ = alloc Float[Z :. e0 :. e1 :. e3]
    execute
      backpermute
      ( \(T3 x0 x1 x2) -> T3 x0 x2 x1
      , in (Z :. e10 :. e11 :. e12) b4
      , out (Z :. making bp
e0 :. e1 :. e3) b7 )
    b8: [Float]¹ = alloc Float[Z :. e0 :. e1]
    execute
      fold-2
      (\x0 x1 -> x0 + x1, in (Z :. e0 :. e1 :. e3) b7, out (Z :. e0 :. e1) b8)
    return (T3 e0 e1 b8)

PartitionedAcc:
\T3 (e0: Int) (e1: Int) (b0: [Float]) ->
  \T3 (e2: Int) (e3: Int) (b1: [Float]) ->
    T3 (e4: Int) (e5: Int) (e6: Int) =
      compute indexFull (T3 () () e3) (T2 e0 e1)
    T3 (e7: Int) (e8: Int) (e9: Int) =
      compute indexFull (T3 e0 () ()) (T2 e2 e3)
    b2: [Float]¹ = alloc Float[Z :. e0 :. e1 :. e3]
    b3: [Float]¹ = alloc Float[Z :. e0 :. e1]
    b4: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
    b5: [Float]¹ = alloc Float[Z :. e7 :. e8 :. e9]
    e10: Int = compute min e4 e7
    e11: Int = compute min e5 e8
    e12: Int = compute min e6 e9
    execute
      backpermute
        ( \(T3 x0 x1 x2) -> indexSlice (T3 () () e3) (T3 x0 x1 x2)
        , in (Z :. e0 :. e1) b0
        , out (Z :. e4 :. e5 :. e6) b4 )
    execute
      backpermute
        ( \(T3 x0 x1 x2) -> indexSlice (T3 e0 () ()) (T3 x0 x1 x2)
        , in (Z :. e2 :. e3) b1
        , out (Z :. e7 :. e8 :. e9) b5 )
    b6: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e12]
    b7: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e12]
    b8: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e12]
    cluster
      { backpermute
          ( \(T3 x0 x1 x2) -> T3 x0 x1 x2
          , in (Z :. e7 :. e8 :. e9) b5
          , out (Z :. e10 :. e11 :. e12) b8 )
      ; backpermute
          ( \(T3 x0 x1 x2) -> T3 x0 x1 x2
          , in (Z :. e4 :. e5 :. e6) b4
          , out (Z :. e10 :. e11 :. e12) b7 )
      ; map
          ( \(x0, x1) -> x0 * x1
          , out (Z :. e10 :. e11 :. e12) b7
          , out (Z :. e10 :. e11 :. e12) b8
          , out (Z :. e10 :. e11 :. e12) b6 )
      ; backpermute
          ( \(T3 x0 x1 x2) -> T3 x0 x2 x1
          , in (Z :. e10 :. e11 :. e12) b6
          , out (Z :. e0 :. e1 :. e3) b2 )
      ; fold-2
          ( \x0 x1 -> x0 + x1
          , out (Z :. e0 :. e1 :. e3) b2
          , out (Z :. e0 :. e1) b3 )
      }
    return (T3 e0 e1 b3)
SLV'd PartitionedAcc:
\T3 (e0: Int) (e1: Int) (b0: [Float]) ->
  \T3 (e2: Int) (e3: Int) (b1: [Float]) ->
    T3 (e4: Int) (e5: Int) (e6: Int) =
      compute indexFull (T3 () () e3) (T2 e0 e1)
    T3 (e7: Int) (e8: Int) (e9: Int) =
      compute indexFull (T3 e0 () ()) (T2 e2 e3)
    b2: [Float]¹ = alloc Float[Z :. e0 :. e1]
    b3: [Float]¹ = alloc Float[Z :. e4 :. e5 :. e6]
    b4: [Float]¹ = alloc Float[Z :. e7 :. e8 :. e9]
    e10: Int = compute min e4 e7
    e11: Int = compute min e5 e8
    e12: Int = compute min e6 e9
    execute
      backpermute
        ( \(T3 x0 x1 x2) -> indexSlice (T3 () () e3) (T3 x0 x1 x2)
        , in (Z :. e0 :. e1) b0
        , out (Z :. e4 :. e5 :. e6) b3 )
    execute
      backpermute
        ( \(T3 x0 x1 x2) -> indexSlice (T3 e0 () ()) (T3 x0 x1 x2)
        , in (Z :. e2 :. e3) b1
        , out (Z :. e7 :. e8 :. e9) b4 )
    b5: [Float]¹ = alloc Float[Z :. e10 :. e11 :. e12]
    cluster
      { backpermute
          ( \(T3 x0 x1 x2) -> T3 x0 x1 x2
          , in (Z :. e7 :. e8 :. e9) b4
          , out (Z :. e10 :. e11 :. e12) %0 )
      ; backpermute
          ( \(T3 x0 x1 x2) -> T3 x0 x1 x2
          , in (Z :. e4 :. e5 :. e6) b3
          , out (Z :. e10 :. e11 :. e12) %1 )
      ; map
          ( \(x0, x1) -> x0 * x1
          , in (Z :. e10 :. e11 :. e12) %1
          , in (Z :. e10 :. e11 :. e12) %0
          , out (Z :. e10 :. e11 :. e12) b5 )
      ; backpermute
          ( \(T3 x0 x1 x2) -> T3 x0 x2 x1
          , in (Z :. e10 :. e11 :. e12) b5
          , out (Z :. e0 :. e1 :. e3) %2 )
      ; fold-2
     nofib-llvm-native: shouldn't have trusted me
CallStack (from HasCallStack):
  error, called at src/Data/Array/Accelerate/LLVM/Native/CodeGen.hs:165:16 in accelerate-llvm-native-1.3.0.0-zOEtjf5Nq6BWao6phvyEN:Data.Array.Accelerate.LLVM.Native.CodeGen

accelerate-llvm-native> Test suite nofib-llvm-native failed
Completed 2 action(s).
Test suite failure for package accelerate-llvm-native-1.3.0.0
    nofib-llvm-native:  exited with: ExitFailure 1
Logs printed to console

